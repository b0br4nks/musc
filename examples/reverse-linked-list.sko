use <std.sko>

fn &node/value &64 end
fn &node/prev 8 + &64 end
fn *node/value *64 end
fn *node/prev ~ 8 + ~ *64 end
fn sizeof(node) 16 end

fn list_a mem end
fn list_b list_a 8 + end

fn nodes_count list_b 8 + end
fn nodes nodes_count 8 + end

fn alloc_node
  nodes_count &64 sizeof(node) * nodes +
  nodes_count cp &64 1 + *64
end

fn push_node
  over alloc_node pcp ~ &64 *node/prev *64
  ~ &64 cast(ptr) ~ *node/value
end

fn pop_node
  cp &64 cast(ptr) &node/value ~
  cp &64 cast(ptr) &node/prev *64
end

-- initialize list_a
0 while cp 5 < do
  list_a over push_node
  1 +
end !

-- reverse list_a into list_b
while list_a &64 0 != do
  list_a pop_node list_b ~ push_node
end

-- print list_b
while list_b &64 0 != do
  list_b pop_node =>
end


