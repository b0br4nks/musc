use <std.sko>

-- constants
fn ROWS 10 end
fn COLS 20 end
fn BOARD_SIZE ROWS COLS * end
fn PUTD_BUFFER_CAP 32 end

-- memory layout
fn putd_buffer mem end
fn delta_time putd_buffer PUTD_BUFFER_CAP + end
fn board_current_index delta_time 16 + end
fn nbors board_current_index 8 + end
fn value nbors 8 + end
fn board_base value 8 + end
fn display BOARD_SIZE 2 * board_base + end

fn putd
  cp 0 = if
    "0" fmt
  else
    putd_buffer PUTD_BUFFER_CAP +
    while over 0 > do
      1 - cp rot
      10 divmod
      rot ~ '0' + *s ~
    end

    cp
    putd_buffer PUTD_BUFFER_CAP + ~ - ~ fmt
  end
  !
end

fn board_current
  board_base board_current_index &64 BOARD_SIZE * +
end

fn board_next
  board_base 1 board_current_index &64 - BOARD_SIZE * +
end

fn sw_boards
  board_current_index 1 board_current_index &64 - *64
end

fn display_row
  0 while cp COLS < do
    pcp + &l 0 = if
      display over + '.' *s
    else
      display over + '#' *s
    end
    1 +
  end !
  COLS display + '\n' *s
  COLS 1 + display fmt
  !
end

fn display_board
  0 while cp ROWS < do
    pcp COLS * + display_row
    1 +
  end !
  !
end

fn display_current_board
  board_current display_board
end

fn get_current_cell
  ~ COLS * + board_current + &l
end

fn set_next_cell
  value ~ *64
  ~ COLS * + board_next +
  value &64
  *s
end

fn in_bounds
  cp 0 >= ~ COLS < and
  ~
  cp 0 >= ~ ROWS < and
  and
end

fn count_current_nbors
  nbors 0 *64

  pcp 1 - ~ 1 - ~ pcp in_bounds
  rot rot ~ COLS * + board_current + &l 1 =
  and if nbors i64 end

  pcp 1 - pcp in_bounds
  rot rot ~ COLS * + board_current + &l 1 =
  and if nbors i64 end

  pcp 1 - ~ 1 + ~ pcp in_bounds
  rot rot ~ COLS * + board_current + &l 1 =
  and if nbors i64 end

  pcp ~ 1 - ~ pcp in_bounds
  rot rot ~ COLS * + board_current + &l 1 =
  and if nbors i64 end

  pcp ~ 1 + ~ pcp in_bounds
  rot rot ~ COLS * + board_current + &l 1 =
  and if nbors i64 end

  pcp 1 + ~ 1 - ~ pcp in_bounds
  rot rot ~ COLS * + board_current + &l 1 =
  and if nbors i64 end

  pcp 1 + pcp in_bounds
  rot rot ~ COLS * + board_current + &l 1 =
  and if nbors i64 end

  pcp 1 + ~ 1 + ~ pcp in_bounds
  rot rot ~ COLS * + board_current + &l 1 =
  and if nbors i64 end

  !!
  nbors &64
end

fn compute_next_board
  0 while cp ROWS < do
    0 while cp COLS < do
      pcp get_current_cell 1 = if
        pcp count_current_nbors
        cp 2 = ~ 3 = or if
          pcp 1 set_next_cell
        else
          pcp 0 set_next_cell
        end
      else
        pcp count_current_nbors 3 = if
          pcp 1 set_next_cell
        else
          pcp 0 set_next_cell
        end
      end

      1 +
    end !
    1 +
  end !
end

fn put_glider
   cp 0 COLS * 1 + + 1 *s
   cp 1 COLS * 2 + + 1 *s
   cp 2 COLS * 0 + + 1 *s
   cp 2 COLS * 1 + + 1 *s
   cp 2 COLS * 2 + + 1 *s
   !
end

fn main
  delta_time 8 + 100000000 *64

  board_current put_glider

  while true do
    display_current_board
    compute_next_board
    sw_boards

    NULL delta_time 0 CLOCK_MONOTONIC clock_nanosleep !
    "\033[" fmt ROWS putd "A" fmt
    "\033[" fmt COLS putd "D" fmt
  end
end

main
